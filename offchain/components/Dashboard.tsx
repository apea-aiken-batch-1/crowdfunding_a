import { Accordion, AccordionItem } from "@nextui-org/accordion";

import { ZonedDateTime } from "@internationalized/date";

import CreatedCampaigns from "./creator/CreatedCampaigns";
import CreateCampaignButton from "./creator/CreateCampaignButton";

import AvailableCampaigns from "./backer/AvailableCampaigns";

import {
  Address,
  applyDoubleCborEncoding,
  credentialToAddress,
  Data,
  fromText,
  keyHashToCredential,
  LucidEvolution,
  paymentCredentialOf,
  SpendingValidator,
  stakeCredentialOf,
  TxSignBuilder,
  UTxO,
  validatorToAddress,
} from "@lucid-evolution/lucid";
import { CampaignDatum, CampaignRedeemerAction } from "@/types/cardano";

const Script = {
  Spend: applyDoubleCborEncoding(
    ""
  ),
};
const spendingValidator: SpendingValidator = {
  type: "PlutusV3",
  script: Script.Spend,
};

export default function Dashboard(props: {
  lucid: LucidEvolution;
  address: Address;
  setActionResult: (result: string) => void;
  onError: (error: any) => void;
}) {
  const { lucid, address, setActionResult, onError } = props;

  const crowdfundingAddress = validatorToAddress(lucid.config().network, spendingValidator);

  async function submitTx(tx: TxSignBuilder) {
    const txSigned = await tx.sign.withWallet().complete();
    const txHash = await txSigned.submit();

    return txHash;
  }

  type Action = (params: any) => Promise<void>;
  type ActionGroup = Record<string, Action>;

  const actions: Record<string, ActionGroup> = {
    CampaignCreator: {
      createCampaign: async (campaign: { title: string; goal: string; deadline: ZonedDateTime }) => {
        try {
          const pkh = paymentCredentialOf(address).hash;

          const stakeAddress = await lucid.wallet().rewardAddress();
          const skh = stakeAddress ? stakeCredentialOf(stakeAddress).hash : "";

          const datum: CampaignDatum = {
            title: fromText(campaign.title),
            goal: BigInt(parseFloat(campaign.goal) * 1_000000),
            deadline: BigInt(campaign.deadline.toDate().getTime()),
            creator: { pkh, skh },
            backers: new Map(),
          };

          const tx = await lucid
            .newTx()
            .pay.ToContract(crowdfundingAddress, { kind: "inline", value: Data.to(datum, CampaignDatum) })
            .complete();

          submitTx(tx).then(setActionResult).catch(onError);
        } catch (error) {
          onError(error);
        }
      },

      finishCampaign: async ({ utxo }: { utxo: UTxO }) => {
        try {
          const tx = await lucid
            .newTx()
            .collectFrom([utxo], CampaignRedeemerAction.finish)
            .attach.SpendingValidator(spendingValidator)
            .addSigner(address)
            .complete();

          submitTx(tx).then(setActionResult).catch(onError);
        } catch (error) {
          onError(error);
        }
      },

      cancelCampaign: async ({ campaign, utxo }: { campaign: CampaignDatum; utxo: UTxO }) => {
        try {
          let newTx = lucid.newTx().collectFrom([utxo], CampaignRedeemerAction.cancel).attach.SpendingValidator(spendingValidator).addSigner(address);
          campaign.backers.forEach((lovelace, { pkh, skh }) => {
            const paymentCredential = keyHashToCredential(pkh);
            const stakeCredential = skh ? keyHashToCredential(skh) : undefined;
            const backerAddress = credentialToAddress(lucid.config().network, paymentCredential, stakeCredential);
            newTx = newTx.pay.ToAddress(backerAddress, { lovelace });
          });
          const tx = await newTx.complete();

          submitTx(tx).then(setActionResult).catch(onError);
        } catch (error) {
          onError(error);
        }
      },
    },

    Backer: {
      pledgeCampaign: async ({ pledgeAmount, campaign, utxo }: { pledgeAmount: string; campaign: CampaignDatum; utxo: UTxO }) => {
        try {
          const pkh = paymentCredentialOf(address).hash;

          const stakeAddress = await lucid.wallet().rewardAddress();
          const skh = stakeAddress ? stakeCredentialOf(stakeAddress).hash : "";

          const key = [...campaign.backers.keys()].find((key) => key.pkh === pkh && key.skh === skh) ?? { pkh, skh };
          const val = BigInt(parseFloat(pledgeAmount) * 1_000000);

          const datum: CampaignDatum = {
            ...campaign,
            backers: campaign.backers.set(key, (campaign.backers.get(key) ?? 0n) + val),
          };

          const block = await fetch("/blocks/latest", { headers: { project_id: `${process.env.NEXT_PUBLIC_BF_PID}` } });
          const { time } = await block.json();

          const tx = await lucid
            .newTx()
            .collectFrom([utxo], CampaignRedeemerAction.pledge)
            .attach.SpendingValidator(spendingValidator)
            .pay.ToContract(
              crowdfundingAddress,
              { kind: "inline", value: Data.to(datum, CampaignDatum) },
              { ...utxo.assets, lovelace: utxo.assets.lovelace + val }
            )
            .addSigner(address)
            .validFrom(time * 1_000)
            .complete();

          submitTx(tx).then(setActionResult).catch(onError);
        } catch (error) {
          onError(error);
        }
      },
    },
  };

  return (
    <div className="flex flex-col gap-2">
      <span>{address}</span>

      <Accordion variant="splitted">
        {/* CampaignCreator */}
        <AccordionItem key="1" aria-label="Accordion 1" title="Campaign Creator">
          <div className="flex flex-wrap gap-2 mb-2">
            <CreatedCampaigns
              lucid={lucid}
              address={address}
              crowdfundingAddress={crowdfundingAddress}
              finishCampaign={actions.CampaignCreator.finishCampaign}
              cancelCampaign={actions.CampaignCreator.cancelCampaign}
              onError={onError}
            />
            <CreateCampaignButton createCampaign={actions.CampaignCreator.createCampaign} onError={onError} />
          </div>
        </AccordionItem>

        {/* Backer */}
        <AccordionItem key="2" aria-label="Accordion 2" title="Pledge Campaigns">
          <div className="flex flex-wrap gap-2 mb-2">
            <AvailableCampaigns
              lucid={lucid}
              address={address}
              crowdfundingAddress={crowdfundingAddress}
              pledgeCampaign={actions.Backer.pledgeCampaign}
              onError={onError}
            />
          </div>
        </AccordionItem>
      </Accordion>
    </div>
  );
}
